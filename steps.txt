
0. If you don't have a package.json:
  $ npm init -y

1. Install the default packages for your server:

  - express
  - mongoose
  - dotenv

2. Install the following dependencies (needed for the authentification process):

  - bcrypt: for hashing password (if it does not work, use bcryptjs instead)
  - connect-flash: for managing errors with the Login with passport
  - express-session: for creating sessions (space in memory) to keep the information of the user even though the pages reloads or she/he goes to a different route
  - passport: authentification middleware for express
  - passport-local: passport strategy for authenticating with username and password


3. (app.js) Import the packages we just installed

4. (app.js) Set up the server with express

5. (app.js) Add the middleware for req.body

6. (app.js) Connect your app to Mongo Atlas through Mongoose

7. (/.env) Create the .env file and create the variables from Mongo Atlas (username, password and the database name). Remember to include them on the mongoose connection link. Also you should add the .env file to the .gitignore file.

8. (app.js) Configure the middleware for the session

9. (app.js) Configure the serialization of the user

10. (app.js) Configure the deserialization of the user

11. (app.js) Configure the middleware for flash

12. (app.js) Configure the middleware for the Strategy

13. (/models) Create a models folder. Create a "User.model.js" file with the schema of the user inside

14. (app.js) Import the User model in app.js

15. (app.js) Configure passport middleware

16. (/routes) Create routes folder. Inside, create auth.routes.js

17. (app.js) Connect the router to app.js

18. (auth.routes.js) Import router, passport, bcrypt and the User model. Export the router 




STEPS FOR MERGIN OUR FRONTEND WITH OUR BACKEND (MANUALLY)

1. Create a client folder inside the backend. This folder is going to contain all of our Frontend
  $ npx create-react-app client

2. Inside the client folder, run $ npm run build . This will creata a build folder with our app compressed in JS, CSS and HTML ready to be deployed.

3. Move the build folder from the client folder to the root folder (the backend)

4. Run $ npm install path (In the backend)

5. At the top of your app (just after const app = express()), add this middleware:

  - app.use(express.static(path.join(__dirname, "build")));

6. At the bottom of your app (just before the app.listen() and **IMPORTANT** AFTER your backend routes ), add this middleware:

 - app.use((req, res) => res.sendFile(path.join(__dirname, "build", "index.html")));

7. Run node app.js and you will be able to see your Frontend



STEPS FOR MERGING OUR FRONTEND WITH OUR BACKEND (AUTOMATICALLY)

1. Create a client folder inside the backend. This folder is going to contain all of our Frontend
  $ npx create-react-app client

2. Run $ npm install path (in the backend)

3. At the top of your app (just after const app = express()), add this middleware:

  - app.use(express.static(path.join(__dirname, "build")));

4. At the bottom of your app (just before the app.listen() and **IMPORTANT** AFTER your backend routes ), add this middleware:

 - app.use((req, res) => res.sendFile(path.join(__dirname, "build", "index.html")));

5. Go to package.json inside the client, and in the scripts add this line:

     "postbuild": "rm -rf ../build && mv build ../"
  
  This is going to, after the build is done, delete the previous build folder we had in the backend and move the new build folder into the backend.

6. Inside the client, run npm run build every time you make a change in the frontend. You will see the changes in the backend automatically.